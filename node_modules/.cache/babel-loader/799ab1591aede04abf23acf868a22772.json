{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\MY PC\\\\Desktop\\\\mobx-react-typescript-example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\MY PC\\\\Desktop\\\\mobx-react-typescript-example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\MY PC\\\\Desktop\\\\mobx-react-typescript-example\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { decorate, observable, computed } from \"mobx\";\nimport { toast } from \"react-toastify\";\nexport var TodoStore = /*#__PURE__*/function () {\n  function TodoStore() {\n    var _this = this;\n\n    _classCallCheck(this, TodoStore);\n\n    this.todos = [{\n      id: 1,\n      text: \"todo 1\",\n      completed: false\n    }, {\n      id: 2,\n      text: \"todo 2\",\n      completed: false\n    }, {\n      id: 3,\n      text: \"todo 3\",\n      completed: false\n    }];\n\n    this.addTodo = function (todo) {\n      _this.todos.push(todo);\n\n      toast.success(\"New Todo added\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    };\n\n    this.updateTodo = function (updatedTodo) {\n      var updatedTodos = _this.todos.map(function (todo) {\n        if (todo.id === updatedTodo.id) {\n          return _objectSpread({}, updatedTodo);\n        }\n\n        return todo;\n      });\n\n      _this.todos = updatedTodos;\n    };\n\n    this.deleteTodo = function (id) {\n      var updatedTodos = _this.todos.filter(function (todo) {\n        return todo.id !== id;\n      });\n\n      _this.todos = updatedTodos;\n      toast.info(\"Todo deleted\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    };\n  }\n\n  _createClass(TodoStore, [{\n    key: \"todoProgress\",\n    get: function get() {\n      var completedCount = this.todos.filter(function (t) {\n        return t.completed;\n      }).length;\n      var totalCount = this.todos.length;\n      return \"\".concat(completedCount, \" / \").concat(totalCount);\n    }\n  }, {\n    key: \"completedTodos\",\n    get: function get() {\n      return this.todos.filter(function (todo) {\n        return todo.completed;\n      });\n    }\n  }, {\n    key: \"incompleteTodos\",\n    get: function get() {\n      return this.todos.filter(function (todo) {\n        return !todo.completed;\n      });\n    }\n  }]);\n\n  return TodoStore;\n}();\ndecorate(TodoStore, {\n  todos: observable,\n  todoProgress: computed,\n  completedTodos: computed,\n  incompleteTodos: computed\n});","map":{"version":3,"sources":["C:/Users/MY PC/Desktop/mobx-react-typescript-example/src/stores/TodoStore.ts"],"names":["decorate","observable","computed","toast","TodoStore","todos","id","text","completed","addTodo","todo","push","success","position","POSITION","BOTTOM_CENTER","updateTodo","updatedTodo","updatedTodos","map","deleteTodo","filter","info","completedCount","t","length","totalCount","todoProgress","completedTodos","incompleteTodos"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,QAA/B,QAA+C,MAA/C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAOA,WAAaC,SAAb;AAAA;AAAA;;AAAA;;AAAA,SACSC,KADT,GAC0B,CACtB;AAAEC,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,IAAI,EAAE,QAAf;AAAyBC,MAAAA,SAAS,EAAE;AAApC,KADsB,EAEtB;AAAEF,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,IAAI,EAAE,QAAf;AAAyBC,MAAAA,SAAS,EAAE;AAApC,KAFsB,EAGtB;AAAEF,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,IAAI,EAAE,QAAf;AAAyBC,MAAAA,SAAS,EAAE;AAApC,KAHsB,CAD1B;;AAAA,SAOSC,OAPT,GAOmB,UAACC,IAAD,EAAiB;AAChC,MAAA,KAAI,CAACL,KAAL,CAAWM,IAAX,CAAgBD,IAAhB;;AACAP,MAAAA,KAAK,CAACS,OAAN,CAAc,gBAAd,EAAgC;AAC9BC,QAAAA,QAAQ,EAAEV,KAAK,CAACW,QAAN,CAAeC;AADK,OAAhC;AAGD,KAZH;;AAAA,SAcSC,UAdT,GAcsB,UAACC,WAAD,EAAwB;AAC1C,UAAMC,YAAY,GAAG,KAAI,CAACb,KAAL,CAAWc,GAAX,CAAe,UAAAT,IAAI,EAAI;AAC1C,YAAIA,IAAI,CAACJ,EAAL,KAAYW,WAAW,CAACX,EAA5B,EAAgC;AAC9B,mCAAYW,WAAZ;AACD;;AACD,eAAOP,IAAP;AACD,OALoB,CAArB;;AAMA,MAAA,KAAI,CAACL,KAAL,GAAaa,YAAb;AACD,KAtBH;;AAAA,SAwBSE,UAxBT,GAwBsB,UAACd,EAAD,EAAgB;AAClC,UAAMY,YAAY,GAAG,KAAI,CAACb,KAAL,CAAWgB,MAAX,CAAkB,UAAAX,IAAI;AAAA,eAAIA,IAAI,CAACJ,EAAL,KAAYA,EAAhB;AAAA,OAAtB,CAArB;;AACA,MAAA,KAAI,CAACD,KAAL,GAAaa,YAAb;AACAf,MAAAA,KAAK,CAACmB,IAAN,CAAW,cAAX,EAA2B;AACzBT,QAAAA,QAAQ,EAAEV,KAAK,CAACW,QAAN,CAAeC;AADA,OAA3B;AAGD,KA9BH;AAAA;;AAAA;AAAA;AAAA,wBAgCqB;AACjB,UAAMQ,cAAc,GAAG,KAAKlB,KAAL,CAAWgB,MAAX,CAAkB,UAAAG,CAAC;AAAA,eAAIA,CAAC,CAAChB,SAAN;AAAA,OAAnB,EAAoCiB,MAA3D;AACA,UAAMC,UAAU,GAAG,KAAKrB,KAAL,CAAWoB,MAA9B;AACA,uBAAUF,cAAV,gBAA8BG,UAA9B;AACD;AApCH;AAAA;AAAA,wBAsCuB;AACnB,aAAO,KAAKrB,KAAL,CAAWgB,MAAX,CAAkB,UAAAX,IAAI;AAAA,eAAIA,IAAI,CAACF,SAAT;AAAA,OAAtB,CAAP;AACD;AAxCH;AAAA;AAAA,wBA0CwB;AACpB,aAAO,KAAKH,KAAL,CAAWgB,MAAX,CAAkB,UAAAX,IAAI;AAAA,eAAI,CAACA,IAAI,CAACF,SAAV;AAAA,OAAtB,CAAP;AACD;AA5CH;;AAAA;AAAA;AA+CAR,QAAQ,CAACI,SAAD,EAAY;AAClBC,EAAAA,KAAK,EAAEJ,UADW;AAElB0B,EAAAA,YAAY,EAAEzB,QAFI;AAGlB0B,EAAAA,cAAc,EAAE1B,QAHE;AAIlB2B,EAAAA,eAAe,EAAE3B;AAJC,CAAZ,CAAR","sourcesContent":["import { decorate, observable, computed } from \"mobx\";\nimport { toast } from \"react-toastify\";\n\nexport interface ITodo {\n  id: number;\n  text: string;\n}\n\nexport class TodoStore {\n  public todos: ITodo[] = [\n    { id: 1, text: \"todo 1\", completed: false },\n    { id: 2, text: \"todo 2\", completed: false },\n    { id: 3, text: \"todo 3\", completed: false }\n  ];\n\n  public addTodo = (todo: ITodo) => {\n    this.todos.push(todo);\n    toast.success(\"New Todo added\", {\n      position: toast.POSITION.BOTTOM_CENTER\n    });\n  };\n\n  public updateTodo = (updatedTodo: ITodo) => {\n    const updatedTodos = this.todos.map(todo => {\n      if (todo.id === updatedTodo.id) {\n        return { ...updatedTodo };\n      }\n      return todo;\n    });\n    this.todos = updatedTodos;\n  };\n\n  public deleteTodo = (id: number) => {\n    const updatedTodos = this.todos.filter(todo => todo.id !== id);\n    this.todos = updatedTodos;\n    toast.info(\"Todo deleted\", {\n      position: toast.POSITION.BOTTOM_CENTER\n    });\n  };\n\n  get todoProgress() {\n    const completedCount = this.todos.filter(t => t.completed).length;\n    const totalCount = this.todos.length;\n    return `${completedCount} / ${totalCount}`;\n  }\n\n  get completedTodos() {\n    return this.todos.filter(todo => todo.completed);\n  }\n\n  get incompleteTodos() {\n    return this.todos.filter(todo => !todo.completed);\n  }\n}\n\ndecorate(TodoStore, {\n  todos: observable,\n  todoProgress: computed,\n  completedTodos: computed,\n  incompleteTodos: computed\n});\n"]},"metadata":{},"sourceType":"module"}